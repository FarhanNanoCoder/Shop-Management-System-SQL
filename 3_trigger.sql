DROP TRIGGER CH_REC_AND_UP_INV;

DROP TRIGGER CH_AND_UP_REC;

CREATE OR REPLACE TRIGGER CH_REC_AND_UP_INV AFTER INSERT ON RECORD
FOR EACH ROW
DECLARE
    PAY_ID PAYMENT.ID%TYPE := :NEW.PAY_ID;
    PRO_ID PRODUCT.ID%TYPE := :NEW.PRO_ID;
    REC_QUANTITY RECORD.QUANTITY%TYPE := :NEW.QUANTITY;
    SHOP_ID  SHOP.ID%TYPE;
    INV_QUANTITY INVENTORY.QUANTITY%TYPE;
BEGIN 
   
    -- GETTING SHOP ID
    SELECT P.S_ID INTO SHOP_ID
    FROM PAYMENT P
    WHERE P.ID = PAY_ID;

--    GETTING INVENTORY QUANTITY
    SELECT I.QUANTITY INTO INV_QUANTITY
    FROM INVENTORY I 
    WHERE I.S_ID = SHOP_ID AND I.P_ID = PRO_ID;

    IF(INV_QUANTITY IS NULL OR INV_QUANTITY<REC_QUANTITY) THEN
    RAISE_APPLICATION_ERROR(-400,'DEMAND IS GREATER THAN STOCK');
    DELETE FROM RECORD R
    WHERE R.PAY_ID = PAY_ID AND R.PRO_ID = PRO_ID;

    ELSE
    INV_QUANTITY := INV_QUANTITY - REC_QUANTITY;
    UPDATE INVENTORY I 
    SET QUANTITY = INV_QUANTITY
    WHERE I.S_ID = SHOP_ID AND I.P_ID = PRO_ID;
    END IF;

END;
/
SHOW ERRORS;

-- CREATE OR REPLACE TRIGGER CH_AND_UP_REC AFTER INSERT ON RECORD
-- FOR EACH ROW 
-- DECLARE
--     -- PAY_ID RECORD.PAY_ID%TYPE := :NEW.PAY_ID;
--     -- PRO_ID RECORD.PRO_ID%TYPE := :NEW.PRO_ID;
--     PR RECORD.PRO_ID%TYPE := :NEW.PRO_ID;;
--     PA RECORD.PAY_ID%TYPE := :NEW.PAY_ID;
--     PRO_PRICE  PRODUCT.PRICE%TYPE;
--     REC_QUANTITY RECORD.QUANTITY%TYPE;
--     REC_AMOUNT RECORD.AMOUNT%TYPE;
--     -- pragma autonomous_transaction;
-- BEGIN
--     -- SET_RECORD_AMOUNT(PAY_ID,PRO_ID);
--     DBMS_OUTPUT.PUT_LINE('PRO_ID: '||PRO_ID||' PAY_ID: '||PAY_ID);

--     SELECT R.QUANTITY,P.PRICE 
--     INTO REC_QUANTITY,PRO_PRICE
--     FROM RECORD R JOIN PRODUCT P
--     ON (R.PAY_ID = PA AND R.PRO_ID = PR AND R.PRO_ID = P.ID);
    
--     REC_AMOUNT := PRO_PRICE * REC_QUANTITY; 

--     DBMS_OUTPUT.PUT_LINE('QUANTIYY :'||REC_QUANTITY || ' PRICE:'||PRO_PRICE
--     ||' AMOUNT:'||REC_AMOUNT);

--     UPDATE RECORD R
--     SET AMOUNT = REC_AMOUNT
--     WHERE R.PAY_ID = PA AND R.PRO_ID = PR;

--     UPDATE_TOTAL_PAYMENT(PA,REC_AMOUNT);
-- END;
-- /
-- SHOW ERRORS;